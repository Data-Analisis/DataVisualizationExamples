# -*- coding: utf-8 -*-import bpyimport numpy as npimport random  DEBUG=TruebgnF=1endF=4000skipD=10scene = bpy.context.sceneobj = bpy.context.objectdef preCookData(rawData):    fluData=[]    nrmData=[]    t=1    r=1    for i in range(int(len(rawData))):        try:            #tmpL=[0,0,0,0,'s']            tmpL=[0,0,0,0]            dat=rawData[i]            stat='flu'                        # content            cont=dat[3].decode('ascii')            # A ROBUST NLP ALGOTITHM             if ('sick' not in cont) and (' fever ' not in cont) and (' cough' not in cont) and (' ill ' not in cont) and(' caugh' not in cont):                stat='nrm'                 t+=1                if t<skipD:                    continue                else:                    t=1            else:                r+=1                if r<skipD:                    continue                else:                    r=1            #id            tmpL[0]=dat[0]            #time2frame            tmpDate=dat[1].decode('ascii')            date,time=tmpDate.split(' ')            month,day,year=map(int,date.split('/'))            hrs,min=map(int,time.split(':'))            if month==4:                day=0            frames=int((day*24*60+hrs*60+min)/10)            tmpL[1]=frames            # location            location=dat[2].decode('ascii')            x,y=map(float,location.split(' '))            tmpL[2],tmpL[3]=((1-(x-42.1609)/0.1408)*86.47/4),((y-93.1923)/0.375*170/4)            if stat=='flu':                fluData.append(tmpL)            else:                nrmData.append(tmpL)                        except BaseException:            #if DEBUG:             #   print('continue in {0}'.format(i))            continue        fluData=sorted(fluData,key=lambda x:x[1])    nrmData=sorted(nrmData,key=lambda x:x[1])    return [fluData,nrmData]        # ------------main-----------------##read & pre cookrawData=\np.genfromtxt(r'D:\Homeworks\exp7\MC_1_Materials_3-30-2011\Microblogs.csv',\delimiter=',',unpack=False,dtype=None,skip_header=1)if DEBUG:    print('read end')    fulData,nrmData=preCookData(rawData)del(rawData)if DEBUG:    print('precooked')    print('ful dataLength: {0}'.format(len(fulData)))    print('normal dataLength: {0}'.format(len(nrmData)))    print('total frame:{0}'.format(nrmData[-1][1]))    # speed ratiok=1# set materialred_material=bpy.data.materials['red']yellow_material=bpy.data.materials['yellow']# handle flu dataprint('flu data')# name='stand'for b in range(len(fulData)):    ball=fulData[b]        Frame=ball[1]        # choose video cilp    print('new frame:{0}'.format(Frame))    if Frame < bgnF:        continue    if Frame > endF:        break        height=b/len(fulData)*5        # init    scene.frame_set(Frame)    bpy.ops.mesh.primitive_cube_add(location = (ball[3],ball[2],100), radius=0.1)    obj=bpy.context.object    obj.active_material = red_material    obj.keyframe_insert(data_path="location")    # fall down    scene.frame_set(Frame+10*k)    obj.location=(ball[3],ball[2],0.1)    obj.keyframe_insert(data_path="location")    # jump up    scene.frame_set(Frame+10*k+height*k)    obj.location=(ball[3],ball[2],height)    obj.keyframe_insert(data_path="location")    #    bpy.data.objects[name].select = True#    bpy.data.objects[obj.name].select = True#    bpy.ops.object.join()#    name=scene.objects.active.name        bpy.ops.object.select_all(action='DESELECT')    scene.objects.active = None    if DEBUG:        print('flu:{0}'.format(b))    if DEBUG:    i=0cyList=[]frmList=[]print('nromal data')# handle normal datafor p in range(0,len(nrmData)):    prs=nrmData[p]    scene.objects.active = None    Frame=prs[1]        # choose video cilp    if Frame <bgnF:        continue    if Frame>endF:        break            # init    scene.frame_set(Frame)    available=[i for i in range(len(frmList)) if frmList[i]<Frame]        if len(available)>0: # unnessaray to creat a new object         obj=bpy.data.objects[cyList[available[0]]]        obj.location=(prs[3],prs[2],-1)    else: # no available onject        bpy.ops.mesh.primitive_cone_add(location = (prs[3],prs[2],-1), vertices=4,radius1=0.5)        obj=bpy.context.object        obj.active_material = yellow_material        obj.keyframe_insert(data_path="location")        # jump up    scene.frame_set(Frame+10*k)    obj.location=(prs[3],prs[2],0.5)    obj.keyframe_insert(data_path="location")        # disapear    scene.frame_set(Frame+20*k)    obj.location=(prs[3],prs[2],-1)     obj.keyframe_insert(data_path="location")        if len(available)>0: # change availbale timeline        frmList[available[0]]=Frame+20*k    else:         cyList.append(obj.name)        frmList.append(Frame+20*k)    if DEBUG:        print(i)        print(len(cyList))        i+=1